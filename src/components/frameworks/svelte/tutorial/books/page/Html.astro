---
import { Code } from "astro:components";
import Section from "../../../../../Section.astro";

import * as FullWrapper from "./pageMd/FullWrapper.md";

import * as Modal from "./pageMd/Modal.md";
---

<Section>
    <h4
        slot="title"
        id="books-page-html"
    >
        HTML
    </h4>
    <Section>
        <h5
            slot="title"
            id="books-page-html-notifications"
        >
            Notifications
        </h5>
        <p>
            The Notifications are identical to the ones we used in the authors page, with "author" replaced with "book".
        </p>
        <p>Creation Notifications</p>
        <div class="inline">
            <Code
                code={`{#key form}
	{#if form}
		{#if form.success}
			<p class="notif success">Book Successfully Created</p>
		{:else if form.success === false}
			<p class="notif error">Error Creating Book</p>
		{/if}
	{/if}
{/key}`}
                lang="svelte"
            />
        </div>
        <p>Deletion Notifications</p>
        <div class="inline">
            <Code
                code={`{#key deleteSuccess}
	{#if deleteSuccess === true}
		<p class="notif success">Book Successfully Deleted</p>
	{:else if deleteSuccess === false}
		<p class="notif error">Error Deleting Book</p>
	{/if}
{/key}`}
                lang="svelte"
            />
            <div></div>
        </div>
    </Section>
    <Section>
        <h5
            slot="title"
            id="books-page-html-list"
        >
            Books List
        </h5>
        <p>
            As with the authors page, we create an unordered list, and then populate it with the books array using an <Code code="each" inline /> loop.<br>
            The list items contain an extra paragraph element that will display the author's name - or if the author is not set, it will display a blank string.</p><p>The question mark after author means that if author is undefined, it will short circuit the name access and instead immediately return undefined. The ?? operator will then return what comes after it (in this case an empty string) if the value before it (author) is undefined.
        </p>
                <div class="inline">
                    <FullWrapper.Content />
                </div>
    </Section>
    <Section>
        <h5
            slot="title"
            id="books-page-html-new"
        >
            New
        </h5>
        <p>
            
            To control if the new book modal is open, we need to add a new variable to the script tag called <Code
                code="showNewBook"
                inline
            /> and set it to <Code
                code="false"
                inline
                lang="ts"
            /> by default.
        </p>
        <div class="inline">
            <Code
                code={`let showNewBook = false;`}
                lang="ts"
            />
        </div>
        <p>
            Now in the HTML, we will add a button with the class <Code
                code="new"
                inline
            /> that will set <Code
                code="showNewBook"
                inline
            /> to <Code
                code="true"
                inline
                lang="ts"
            /> when clicked.
        </p>
        <div class="inline">
            <Code
                code={`<button class="new" on:click={() => (showNewAuthor = true)}> + </button>`}
                lang="svelte"
            />
        </div>
        <p>
            Again we will use the <Code
                code="Modal"
                inline
            /> component to create the modal. We will bind the <Code code="show" inline /> prop to <Code code="showNewBook" inline />.
        </p>
        <p>
            We will add a form that uses <Code code="enhance" inline /> and will <Code code="POST" inline /> back to the server.<br>On submission we will set
            <Code
                code="showNewBook"
                inline
            /> back to <Code
                code="false"
                inline
                lang="ts"
            />.
        </p>
        <p>
            The form contains an additional text area called <Code code="description" inline /> that will be used to store the book's description. A text area is an input specifically for longer text input.
        </p>
        <p>
            The <Code code="AuthorSelect" inline /> component is used to select the author of the book. It is passed the <Code code="authors" inline /> array as a prop to pick the authors from. This is further explained in the <a href="#helpers-author-select">Author Select</a> section.
        <div class="inline">
            <Modal.Content />
        </div>
    </Section>
</Section>
